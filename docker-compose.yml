services:
  # frontend:
  #   build:
  #     context: ./frontend
  #   image: frontend
  #   container_name: frontend
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ./frontend:/app
  #   networks:
  #     - app-network

  ClientBackend:
    build:
      context: ./ClientBackend
    image: clientbackend
    container_name: clientbackend
    environment:
      DB_HOST: database
      DB_PORT: 5432
      DB_DATABASE: chess_nest
      DB_USERNAME: lara
      DB_PASSWORD: lara
      CACHE_DRIVER: redis
      REDIS_HOST: redis
      REDIS_PASSWORD: password
      REDIS_PORT: 6379
    volumes:
      - ./ClientBackend:/var/www
    ports:
      - "8000:8000"
    depends_on:
      - database
      - redis
    networks:
      - app-network
    expose:
      - "9000"

  # GameBackend:
  #   build:
  #     context: ./GameBackend
  #   image: gamebackend
  #   container_name: gamebackend
  #   volumes:
  #     - ./GameBackend:/app
  #   ports:
  #     - "5000:5000"
  #   networks:
  #     - app-network

  database:
    image: postgres:14
    container_name: postgres
    environment:
      POSTGRES_USER: lara
      POSTGRES_PASSWORD: lara
      POSTGRES_DB: chess_nest
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - app-network

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    networks:
      - app-network
    depends_on:
      - database

  proxy:
    image: nginx:1.23
    container_name: nginx
    volumes:
      - ./nginx:/etc/nginx/conf.d
      - ./ClientBackend:/var/www/clientbackend
    ports:
      - "80:80"
    depends_on:
      - ClientBackend
    networks:
      - app-network

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    command: [ "redis-server", "--requirepass", "password" ]
    networks:
      - app-network

  websocket:
    build:
      context: ./ClientBackend
      dockerfile: Dockerfile.websocket
    container_name: websocket
    ports:
      - "6001:6001"
    environment:
      REDIS_HOST: redis
      REDIS_PASSWORD: password
    env_file:
      - ./ClientBackend/.env
    depends_on:
      - redis
    networks:
      - app-network

volumes:
  pg_data:


networks:
  app-network:
